<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://thinkingfunctionally.com/" rel="self" type="application/rss+xml"/><title>Thinking Functionally</title><link>http://thinkingfunctionally.com/</link><description>Discovering the Functional Algorithms with Clojure</description><lastBuildDate>Fri, 17 Nov 2023 22:53:04 +0800</lastBuildDate><generator>clj-rss</generator><item><guid>http://thinkingfunctionally.com/blog/posts-output/2020-12-03-docs/</guid><link>http://thinkingfunctionally.com/blog/posts-output/2020-12-03-docs/</link><title>Quick Start Guide</title><description>This intro only documents a subset of Cryogen's features. For additional documentation please see the cryogen site.Features</description><pubDate>Thu, 03 Dec 2020 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0001twosum/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0001twosum/</link><title>0001 Two Sum</title><description>The code defines a function two-sum that takes a vector of numbers nums and a target number target. The function finds two numbers in the nums vector that add up to the target number and returns their indices as a vector.</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0003LongestSubstringWitoutRepeats/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0003LongestSubstringWitoutRepeats/</link><title>0003 Longest Substring Without Repeats</title><description>incorrect</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0002addtwonumber/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0002addtwonumber/</link><title>0002 Add Two Number </title><description>The given code defines four functions: vec-to-num, num-to-vec, add-two-numbers, and executes a calculation at the end.</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0561ArrayPartition/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0561ArrayPartition/</link><title>0561 Array Partition</title><description>In this Clojure version, we define a function array-pair-sum that takes an array of integers nums as input and returns the maximum sum of the minimum elements in pairs.</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0004medianOfTwoSortedArrays/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-0004medianOfTwoSortedArrays/</link><title>0004 Median of Two Sorted Arrays</title><description>Now let's analyze the time complexity of the code:</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-1877MinimizeMaximumPairSumInArray/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-1877MinimizeMaximumPairSumInArray/</link><title>1877 Minimize Maximum Pair Sum In Array</title><description>Certainly! Let's break down the time and space complexity analysis for the given code snippet:</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item><item><guid>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-1881MinimizeMaximumPairSumInArray/</guid><link>http://thinkingfunctionally.com/blog/posts-output/11-11-2023-1881MinimizeMaximumPairSumInArray/</link><title>1877 Minimize Maximum Pair Sum In Array</title><description>The min-pair-sum function takes a vector of integers nums as input. It first sorts the elements of the nums vector using the sort function. Then, it initializes variables i and j to represent the start and end indices of the sorted vector, respectively. The variable max-pair-sum is initialized to 0.</description><pubDate>Sat, 15 May 0017 00:00:00 +0800</pubDate></item></channel></rss>